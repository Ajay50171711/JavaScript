In JavaScript, arrays are a type of object that allow you to store multiple values in a single variable. These values can be of any data type: numbers, strings, other objects, or even other arrays.

Basic Structure
An array is declared using square brackets [] and its elements are separated by commas. For example:
const fruits = ["apple", "banana", "cherry"];


Key Characteristics of Arrays
----------------------------------
Indexed Collection: Elements are stored in a sequential, zero-based index.
fruits[0] is "apple".
fruits[1] is "banana".


Dynamic: You can add or remove elements without needing to declare the size of the array.
const numbers = []; // Declare an empty array
console.log(numbers); // []
// Add elements to the array dynamically
numbers.push(10);
numbers.push(20);
numbers.push(30);
console.log(numbers); // [10, 20, 30]


Heterogeneous: Arrays can hold multiple data types.
const mixedArray = [42, "hello", true, { key: "value" }, [1, 2, 3]];


Array Methods
JavaScript provides many built-in methods for working with arrays.

push(): Adds one or more elements to the end
fruits.push("orange"); // ["apple", "banana", "cherry", "orange"]

pop(): Removes and returns the last element.
const lastFruit = fruits.pop(); // lastFruit = "orange"

unshift(): Adds elements to the beginning
fruits.unshift("mango"); // ["mango", "apple", "banana", "cherry"]

shift(): Removes the first element
const firstFruit = fruits.shift(); // firstFruit = "mango"

You can loop through arrays using several methods:
for Loop:
for (let i = 0; i < fruits.length; i++) {
    console.log(fruits[i]);
}

for...of Loop:
for (const fruit of fruits) {
    console.log(fruit);
}

forEach():
fruits.forEach((fruit) => console.log(fruit));


map(): Creates a new array by transforming each element.
const uppercasedFruits = fruits.map((fruit) => fruit.toUpperCase());
// ["APPLE", "BANANA", "CHERRY"]

filter(): Creates a new array with elements that pass a condition.
const longFruits = fruits.filter((fruit) => fruit.length > 5);
// ["banana", "cherry"]

reduce(): Reduces the array to a single value.
const totalLength = fruits.reduce((acc, fruit) => acc + fruit.length, 0);
// Total length of all fruit names

3. Step-by-Step Example
If fruits = ["apple", "banana", "cherry"], hereâ€™s how the calculation happens:

Initial Value: acc = 0.

First Iteration:

fruit = "apple".
fruit.length = 5 (number of characters in "apple").
acc = acc + fruit.length = 0 + 5 = 5.
Second Iteration:

fruit = "banana".
fruit.length = 6.
acc = acc + fruit.length = 5 + 6 = 11.
Third Iteration:

fruit = "cherry".
fruit.length = 6.
acc = acc + fruit.length = 11 + 6 = 17.


 concat()
Combines two or more arrays into a new array
const arr1 = [1, 2, 3];
const arr2 = [4, 5, 6];
const combined = arr1.concat(arr2);
console.log(combined); // [1, 2, 3, 4, 5, 6]


includes()
Checks if an array contains a specific element.
const fruits = ["apple", "banana", "cherry"];
console.log(fruits.includes("banana")); // true
console.log(fruits.includes("grape"));  // false


indexOf()
Finds the first index of a specified element, or returns -1 if not found.
const fruits = ["apple", "banana", "cherry", "banana"];
console.log(fruits.indexOf("banana")); // 1
console.log(fruits.indexOf("grape"));  // -1


lastIndexOf()
Finds the last index of a specified element.
const fruits = ["apple", "banana", "cherry", "banana"];
console.log(fruits.lastIndexOf("banana")); // 3


slice()
Returns a shallow copy of a portion of an array without modifying the original array.
const numbers = [1, 2, 3, 4, 5];
console.log(numbers.slice(1, 4)); // [2, 3, 4]
console.log(numbers);            // [1, 2, 3, 4, 5]


splice()
Adds, removes, or replaces elements in an array.

first parameter denote the starting index 
second parameter denote the how many element remove
third parameter denote the which element is add

const numbers = [1, 2, 3, 4, 5];
// Remove 2 elements starting at index 1
numbers.splice(1, 2); 
console.log(numbers); // [1, 4, 5]

// Add elements
numbers.splice(1, 0, 2, 3); 
console.log(numbers); // [1, 2, 3, 4, 5]

//Replace element
numbers.splice(2, 1, 99);
console.log(numbers); // [1, 2, 99, 4, 5]


sort()
Sorts the elements of an array in place.
const numbers = [3, 1, 4, 1, 5, 9];
numbers.sort(); // Default sort is by string Unicode order
console.log(numbers); // [1, 1, 3, 4, 5, 9]


reverse()
Reverses the elements of an array in place.
const numbers = [1, 2, 3, 4, 5];
numbers.reverse();
console.log(numbers); // [5, 4, 3, 2, 1]


 join()
Joins all elements of an array into a string.
const fruits = ["apple", "banana", "cherry"];
console.log(fruits.join(", ")); // "apple, banana, cherry"


10. find()
Returns the first element that matches a condition.
const numbers = [1, 2, 3, 4, 5];
const found = numbers.find((num) => num > 3);
console.log(found); // 4


11. findIndex()
Returns the index of the first element that matches a condition.
const numbers = [1, 2, 3, 4, 5];
const index = numbers.findIndex((num) => num > 3);
console.log(index); // 3


12. every()
Checks if all elements in an array satisfy a condition.
const numbers = [2, 4, 6, 8];
console.log(numbers.every((num) => num % 2 === 0)); // true


13. some()
Checks if at least one element in the array satisfies a condition.
const numbers = [1, 3, 5, 8];
console.log(numbers.some((num) => num % 2 === 0)); // true


14. flat()
Flattens a nested array.
const nested = [1, [2, 3], [4, [5, 6]]];
console.log(nested.flat());     // [1, 2, 3, 4, [5, 6]]
console.log(nested.flat(2));    // [1, 2, 3, 4, 5, 6]


15. flatMap()
Combines map() and flat() into one method.
const words = ["hello", "world"];
console.log(words.flatMap((word) => word.split("")));
// ["h", "e", "l", "l", "o", "w", "o", "r", "l", "d"]


16. fill()
Fills all or part of an array with a static value.
const arr = [1, 2, 3, 4, 5];
arr.fill(0, 1, 4); // Replace elements from index 1 to 3
console.log(arr); // [1, 0, 0, 0, 5]


17. keys(), values(), entries()
Used to iterate over array indices, values, or key-value pairs.
const fruits = ["apple", "banana", "cherry"];

for (const index of fruits.keys()) {
  console.log(index); // 0, 1, 2
}

for (const value of fruits.values()) {
  console.log(value); // "apple", "banana", "cherry"
}

for (const [index, value] of fruits.entries()) {
  console.log(index, value); // 0 "apple", 1 "banana", 2 "cherry"
}









