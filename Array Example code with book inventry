// Array of book titles
let books = ["The Alchemist", "Zero to One", "Atomic Habits", "Deep Work", "The Alchemist", "Grit"];

// 1️⃣ indexOf & lastIndexOf
console.log("First index of 'The Alchemist':", books.indexOf("The Alchemist"));
console.log("Last index of 'The Alchemist':", books.lastIndexOf("The Alchemist"));

// 2️⃣ toUpperCase, toLowerCase
let upperTitles = books.map(title => title.toUpperCase());
let lowerTitles = books.map(title => title.toLowerCase());
console.log("UPPER CASE:", upperTitles);
console.log("lower case:", lowerTitles);

// 3️⃣ length
console.log("Total books:", books.length);

// 4️⃣ fill - fill last 2 elements with "Coming Soon"
let filledBooks = [...books].fill("Coming Soon", books.length - 2);
console.log("Filled array:", filledBooks);

// 5️⃣ splice - remove 1 book from index 2 and add another
let splicedBooks = [...books]; // copy
splicedBooks.splice(2, 1, "Start With Why");
console.log("Spliced array:", splicedBooks);

// 6️⃣ slice - get first 3 books
let topBooks = books.slice(0, 3);
console.log("Top 3 books:", topBooks);

// 7️⃣ sort - sort alphabetically
let sortedBooks = [...books].sort();
console.log("Sorted Books:", sortedBooks);

// 8️⃣ reverse
let reversedBooks = [...books].reverse();
console.log("Reversed Books:", reversedBooks);

// 9️⃣ map - add '📘' emoji to each title
let decorated = books.map(title => "📘 " + title);
console.log("Decorated Titles:", decorated);

// 🔟 includes - check if a book exists
console.log("Has 'Grit'?", books.includes("Grit"));

// 1️⃣1️⃣ every - check if all are strings
console.log("All are strings?", books.every(title => typeof title === "string"));

// 1️⃣2️⃣ some - check if any title contains the word "Work"
console.log("Any title contains 'Work'?", books.some(title => title.includes("Work")));

// 1️⃣3️⃣ find - find first book that starts with 'A'
let bookWithA = books.find(title => title.startsWith("A"));
console.log("First book starting with 'A':", bookWithA);

// 🧾 Object representing book details
const bookDetails = {
  title: "Atomic Habits",
  author: "James Clear",
  year: 2018,
  genre: "Self-help"
};

// 1️⃣4️⃣ Object.keys
console.log("Book Keys:", Object.keys(bookDetails));

// 1️⃣5️⃣ Object.values
console.log("Book Values:", Object.values(bookDetails));

// 1️⃣6️⃣ Object.entries
console.log("Book Entries:", Object.entries(bookDetails));

=========================================================================

A company wants to:

💰 Calculate total payroll (sum of all salaries)

🏆 Identify the highest paid employee

📉 List employees earning below average


============================================

const employees = [
  { name: "Amit", salary: 55000 },
  { name: "Sonal", salary: 72000 },
  { name: "Ravi", salary: 48000 },
  { name: "Megha", salary: 82000 },
  { name: "Tarun", salary: 51000 }
];

// 1️⃣ Total payroll
function getTotalPayroll(employeeList) {
  return employeeList.reduce((total, emp) => total + emp.salary, 0);
}

// 2️⃣ Highest paid employee
function getHighestPaid(employeeList) {
  return employeeList.sort((a, b) => b.salary - a.salary)[0];
}

// 3️⃣ Average salary
function getAverageSalary(employeeList) {
  const total = getTotalPayroll(employeeList);
  return total / employeeList.length;
}

// 4️⃣ Employees earning below average
function getBelowAverageEmployees(employeeList) {
  const average = getAverageSalary(employeeList);
  return employeeList.filter(emp => emp.salary < average);
}

// 🔽 Output
console.log("💰 Total Payroll: ₹" + getTotalPayroll(employees));
console.log("🏆 Highest Paid: " + getHighestPaid(employees).name + " (₹" + getHighestPaid(employees).salary + ")");
console.log("📉 Employees earning below average:", getBelowAverageEmployees(employees));

